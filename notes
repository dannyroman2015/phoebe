// lưu ý khi sử dụng updateOne, updateMany (đặc biệt set 1 trường bằng giá trị 1 trường khác) sử dụng [] (bson.A) ở phần updater
vd: s.mgdb.Collection("gnhh").UpdateOne(context.Background(), filter, bson.A{bson.M{"$set": bson.M{"done": "$qty"}}})
// khi set mà không tham chiếu tới một trường khác thì bỏ []

// question icon svg
<svg class="h-3" viewBox="0 0 10 11" fill="none" xmlns="http://www.w3.org/2000/svg">
	<path d="M2.13347 0.0999756H2.98516L5.01902 4.79058H3.86226L3.45549 3.79907H1.63772L1.24366 4.79058H0.0996094L2.13347 0.0999756ZM2.54025 1.46012L1.96822 2.92196H3.11227L2.54025 1.46012Z" fill="currentColor" stroke="currentColor" stroke-width="0.1" />
	<path d="M0.722656 9.60832L3.09974 6.78633H0.811638V5.87109H4.35819V6.78633L2.01925 9.60832H4.43446V10.5617H0.722656V9.60832Z" fill="currentColor" stroke="currentColor" stroke-width="0.1" />
	<path d="M8.45558 7.25664V7.40664H8.60558H9.66065C9.72481 7.40664 9.74667 7.42274 9.75141 7.42691C9.75148 7.42808 9.75146 7.42993 9.75116 7.43262C9.75001 7.44265 9.74458 7.46304 9.72525 7.49314C9.72522 7.4932 9.72518 7.49326 9.72514 7.49332L7.86959 10.3529L7.86924 10.3534C7.83227 10.4109 7.79863 10.418 7.78568 10.418C7.77272 10.418 7.73908 10.4109 7.70211 10.3534L7.70177 10.3529L5.84621 7.49332C5.84617 7.49325 5.84612 7.49318 5.84608 7.49311C5.82677 7.46302 5.82135 7.44264 5.8202 7.43262C5.81989 7.42993 5.81987 7.42808 5.81994 7.42691C5.82469 7.42274 5.84655 7.40664 5.91071 7.40664H6.96578H7.11578V7.25664V0.633865C7.11578 0.42434 7.29014 0.249976 7.49967 0.249976H8.07169C8.28121 0.249976 8.45558 0.42434 8.45558 0.633865V7.25664Z" fill="currentColor" stroke="currentColor" stroke-width="0.3" />
</svg>

// edit
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
	<path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
</svg>

  

let result = raw.reduce((r, {group: name, ...object}) => {
  let temp = r.find(o => o.name === name);
  if (!temp) r.push(temp = {name, children:[]});
  temp.children.push(object);
  return r;
}, [])

console.log(result)
result = {
  "name": "fff",
  "children": result
}

////////////////////////////////////////////////////////
// vd hàm chuyển data dạng bảng sang data dạng hierachy
////////////////////////////////////////////////////////
var dataaa = [
    { "dep": "First Top", "name": "First child", "type": "A",  "model": "value1", "size": "320" },
    { "dep": "First Top", "name": "First child", "type": "B", "model": "value2", "size": "320" },
    { "dep": "First Top", "name": "SECOND CHILD", "type": "A", "model": "value1", "size": "320" },
    { "dep": "Second Top", "name": "First Child", "type": "B", "model": "value1", "size": "320" }
];

var newData = { name :"root", children : [] },
    levels = ["dep","name", "type"];

// For each data row, loop through the expected levels traversing the output tree
dataaa.forEach(function(d){
    // Keep this as a reference to the current level
    var depthCursor = newData.children;
    // Go down one level at a time
    levels.forEach(function( property, depth ){

        // Look to see if a branch has already been created
        var index;
        depthCursor.forEach(function(child,i){
            if ( d[property] == child.name ) index = i;
        });
        // Add a branch if it isn't there
        if ( isNaN(index) ) {
            depthCursor.push({ name : d[property], children : []});
            index = depthCursor.length - 1;
        }
        // Now reference the new child array as we go deeper into the tree
        depthCursor = depthCursor[index].children;
        // This is a leaf, so add the last element to the specified branch
        if ( depth === levels.length - 1 ) depthCursor.push({ name : d.model, value : d.size });
    });
});

"#75485E"