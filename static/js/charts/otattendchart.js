const drawOtAttendChart = (data, otdata, date) => {
  if (data == undefined) return;
  const width = 900;
  const height = 350;
  const margin = {top: 20, right: 5, bottom: 45, left: 5};
  const innerWidth = width - margin.left - margin.right;
  const innerHeight = height - margin.top - margin.bottom;

  const series = d3.stack()
    .keys(d3.union(data.map(d => d.ispresent)))
    .value(([, D], key) => D.get(key) === undefined ? 0 : D.get(key).value)
    (d3.index(data, d => d.department, d => d.ispresent))

  const x = d3.scaleBand()
    .domain(data.map(d => d.department))
    .range([0, innerWidth])
    .padding(0.1);

  const y = d3.scaleLinear()
    .domain([0,  d3.max(data, d => d.value)])
    .rangeRound([innerHeight, 0])
    .nice()

  const color = d3.scaleOrdinal()
    .domain([true, false, "MANHR", "OVT"])
    .range(["#AEC3AE", "#94A684", "#DBB5B5", "#987070"])
    .unknown("#ccc");

  const svg = d3.create("svg")
    .attr("viewBox", [0, 0, width, height])

  const innerChart = svg.append("g")
    .attr("transform", `translate(${margin.left}, ${margin.top})`)

  innerChart
    .selectAll()
    .data(series)
    .join("g")
      .attr("fill", d => color(d.key))
      .attr("fill-opacity", 0.9)
    .selectAll("rect")
    .data(D => D.map(d => (d.key = D.key, d)))
    .join("rect")
        .attr("x", d => x(d.data[0]))
        .attr("y", d => y(d[1]))
        .attr("height", d => y(d[0]) - y(d[1]))
        .attr("width", x.bandwidth()/2)
      .append("title")
        .text(d => d[1] - d[0])

  innerChart.append("g")
    .attr("transform", `translate(0, ${innerHeight})`)
    .call(d3.axisBottom(x).tickSizeOuter(0))
    .call(g => g.selectAll(".domain").remove())
    .call(g => g.selectAll("text").attr("font-size", "12px")
      .attr("dy", "1.5em")
      .attr("transform", `rotate(-15, 0, 0)`)
    )

  innerChart.append("g")
    .attr("font-family", "sans-serif")
    .attr("font-size", 11)
  .selectAll()
  .data(series[series.length-1])
  .join("text")
    .attr("text-anchor", "middle")
    .attr("alignment-baseline", "middle")
    .attr("x", d => x(d.data[0]) + x.bandwidth()/4)
    .attr("y", d => y(d[1]) - 10)
    .attr("dy", "0.4em") 
    .attr("fill", "#75485E")
    .attr("font-weight", 600)
    .text(d => `${d3.format(",.0f")(d[1])}` )

  series.forEach(serie => {
    innerChart.append("g")
        .attr("font-family", "sans-serif")
        .attr("font-size", 12)
      .selectAll()
      .data(serie)
      .join("text")
        .attr("text-anchor", "middle")
        .attr("alignment-baseline", "middle")
        .attr("x", d => x(d.data[0]) + x.bandwidth()/4)
        .attr("y", d => y(d[1]) - (y(d[1]) - y(d[0]))/2)
        .attr("dy", "0.1em")
        .attr("fill", "#102C57")
        .text(d => (d[1] - d[0] > 3) ? `${d3.format(",.0f")(d[1]-d[0])}` : "")
  })

  innerChart.append("g")
        .attr("font-family", "sans-serif")
        .attr("font-size", 12)
      .selectAll()
      .data(series[1])
      .join("text")
        .attr("text-anchor", "middle")
        .attr("alignment-baseline", "middle")
        .attr("x", d => x(d.data[0]) + x.bandwidth()/4)
        .attr("y", d => y(d[0]/2))
        .attr("dy", "1.2em")
        .attr("fill", "#102C57")
        .text(d => (d[0] >= 15) ? `${d3.format(".0%")(d[0]/d[1])}` : "")

  svg.append("text")
        .text(`${date} - Tổng:`)
        .attr("text-anchor", "start")
        .attr("alignment-baseline", "middle")
        .attr("x", 0)
        .attr("y", 5)
        .attr("dy", "0.35em")
        .attr("fill", "black")
        .attr("font-weight", 600)
        .attr("font-size", 12)


  svg.append("text")
      .text(`Hiện diện: ${d3.sum(data.filter(d => d.ispresent == true), d => d.value)}`)
      .attr("text-anchor", "start")
      .attr("alignment-baseline", "middle")
      .attr("x", 0)
      .attr("y", 25)
      .attr("dy", "0.35em")
      .attr("fill", color(true))
      .attr("font-weight", 600)
      .attr("font-size", 12)
    .append("tspan")
      .text(` - Vắng: ${d3.sum(data.filter(d => d.ispresent == false), d => d.value)}`)
      .attr("text-anchor", "start")
      .attr("alignment-baseline", "middle")
      .attr("fill", color(false))
      .attr("font-weight", 600)
      .attr("font-size", 12)
    .append("tspan")
      .text(` (${d3.format(".0%")(d3.sum(data.filter(d => d.ispresent == false), d => d.value)/d3.sum(data, d => d.value))})`)
      .attr("text-anchor", "start")
      .attr("alignment-baseline", "middle")
      .attr("fill", "black")
      .attr("font-weight", 600)
      .attr("font-size", 12)

  if (otdata != undefined) {
    const otseries = d3.stack()
      .keys(d3.union(otdata.map(d => d.category)))
      .value(([, D], key) => D.get(key) === undefined ? 0 : D.get(key).value)
      (d3.index(otdata, d => d.department, d => d.category))

    const oty = d3.scaleLinear()
      .domain([0,  d3.max(d3.rollups(otdata, D => d3.sum(D, d => d.value) , d => d.department), d => d[1])])
      .rangeRound([innerHeight, 0])
      .nice()

    innerChart
      .selectAll()
      .data(otseries)
      .join("g")
        .attr("fill", d => color(d.key))
        .attr("fill-opacity", 0.9)
      .selectAll("rect")
      .data(D => D.map(d => (d.key = D.key, d)))
      .join("rect")
          .attr("x", d => x(d.data[0]) + x.bandwidth()/2)
          .attr("y", d => oty(d[1]))
          .attr("height", d => oty(d[0]) - oty(d[1]))
          .attr("width", x.bandwidth()/2)
        .append("title")
          .text(d => d[1] - d[0])

    innerChart.append("g")
          .attr("font-family", "sans-serif")
          .attr("font-size", 11)
        .selectAll()
        .data(otseries[otseries.length-1])
        .join("text")
          .attr("text-anchor", "middle")
          .attr("alignment-baseline", "middle")
          .attr("x", d => x(d.data[0]) + 3*x.bandwidth()/4)
          .attr("y", d => oty(d[1]) - 10)
          .attr("dy", "0.4em") 
          .attr("fill", "#75485E")
          .attr("font-weight", 600)
          .text(d => `${d3.format(",.0f")(d[1])}` )



    otseries.forEach(serie => {
      innerChart.append("g")
          .attr("font-family", "sans-serif")
          .attr("font-size", 12)
        .selectAll()
        .data(serie)
        .join("text")
          .attr("text-anchor", "middle")
          .attr("alignment-baseline", "middle")
          .attr("x", d => x(d.data[0]) + 3*x.bandwidth()/4)
          .attr("y", d => oty(d[1]) - (oty(d[1]) - oty(d[0]))/2)
          .attr("dy", "0.1em")
          .attr("fill", "#102C57")
          .text(d => (d[1] - d[0] >= 30) ? `${d3.format(",.0f")(d[1]-d[0])}` : "")
    })

    innerChart.append("g")
          .attr("font-family", "sans-serif")
          .attr("font-size", 12)
        .selectAll()
        .data(otseries[1])
        .join("text")
          .attr("text-anchor", "middle")
          .attr("alignment-baseline", "middle")
          .attr("x", d => x(d.data[0]) + 3*x.bandwidth()/4)
          .attr("y", d => oty(d[0]/2))
          .attr("dy", "1.2em")
          .attr("fill", "#102C57")
          .text(d => (d[0] >= 250) ? `${d3.format(".0%")(d[0]/d[1])}` : "")

    svg.append("text")
          .text(`Giờ thường: ${d3.format(",.0f")(d3.sum(otdata.filter(d => d.category == "MANHR"), d => d.value))}`)
          .attr("text-anchor", "start")
          .attr("alignment-baseline", "middle")
          .attr("x", 0)
          .attr("y", 45)
          .attr("dy", "0.35em")
          .attr("fill", color("MANHR"))
          .attr("font-weight", 600)
          .attr("font-size", 12)
        .append("tspan")
          .text(` - Tăng ca : ${d3.format(",.0f")(d3.sum(otdata.filter(d => d.category == "OVT"), d => d.value))}`)
          .attr("text-anchor", "start")
          .attr("alignment-baseline", "middle")
          .attr("fill", color("OVT"))
          .attr("font-weight", 600)
          .attr("font-size", 12)
        .append("tspan")
          .text(" (hrs)")
          .attr("text-anchor", "start")
          .attr("alignment-baseline", "middle")
          .attr("fill", "black")
          .attr("font-weight", 600)
          .attr("font-size", 12)
        .append("tspan")
          .text(` (${d3.format(".0%")(d3.sum(otdata.filter(d => d.category == "OVT"), d => d.value)/d3.sum(otdata, d => d.value))})`)
          .attr("text-anchor", "start")
          .attr("alignment-baseline", "middle")
          .attr("fill", "black")
          .attr("font-weight", 600)
          .attr("font-size", 12)
  }

  return svg.node();
}